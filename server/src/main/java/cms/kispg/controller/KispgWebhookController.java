package cms.kispg.controller;

import cms.kispg.dto.KispgNotificationRequest;
import cms.kispg.service.KispgWebhookService;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import io.swagger.v3.oas.annotations.Operation;
import cms.common.util.IpUtil;

import javax.servlet.http.HttpServletRequest;

@RestController
@RequestMapping("/kispg")
@RequiredArgsConstructor
public class KispgWebhookController {

    private static final Logger logger = LoggerFactory.getLogger(KispgWebhookController.class);
    private final KispgWebhookService kispgWebhookService;

    @PostMapping(value = "/payment-notification", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    @Operation(summary = "KISPG Í≤∞Ï†ú Í≤∞Í≥º ÌÜµÏßÄ (Webhook)", description = "KISPGÎ°úÎ∂ÄÌÑ∞ Í≤∞Ï†ú Í≤∞Í≥º(ÏÑ±Í≥µ, Ïã§Ìå®, Ï∑®ÏÜå Îì±)Î•º ÎπÑÎèôÍ∏∞Ï†ÅÏúºÎ°ú ÏàòÏã†Ìï©ÎãàÎã§.")
    public ResponseEntity<String> handlePaymentNotification(
            KispgNotificationRequest notificationRequest,
            HttpServletRequest request) {

        String clientIp = IpUtil.getClientIp();
        logger.info("=== KISPG Webhook ÏàòÏã† ÏãúÏûë (IP: {}) ===", clientIp);

        try {
            // 1. Î™®Îì† ÌååÎùºÎØ∏ÌÑ∞ Î°úÍπÖ (KISPGÏóêÏÑú Ïñ¥Îñ§ Ïù¥Î¶ÑÏúºÎ°ú Ïò§ÎäîÏßÄ ÌôïÏù∏)
            logAllRequestParameters(request);

            // 2. KispgNotificationRequest DTO Î°úÍπÖ
            logger.info("üìã KISPG Webhook DTO Îç∞Ïù¥ÌÑ∞:");
            logger.info("  - MID: {}", notificationRequest.getMid());
            logger.info("  - TID: {}", notificationRequest.getTid());
            logger.info("  - MOID: {}", notificationRequest.getMoid());
            logger.info("  - Amt: {}", notificationRequest.getAmt());
            logger.info("  - ResultCode: {}", notificationRequest.getResultCode());
            logger.info("  - ResultMsg: {}", notificationRequest.getResultMsg());
            logger.info("  - PayMethod: {}", notificationRequest.getPayMethod());
            logger.info("  - ApproveNo: {}", notificationRequest.getApproveNo());
            logger.info("  - CardQuota: {}", notificationRequest.getCardQuota());
            logger.info("  - EncData: {}", notificationRequest.getEncData());
            logger.info("  - BuyerName: {}", notificationRequest.getBuyerName());
            // ... Í∏∞ÌÉÄ Î™®Îì† ÌïÑÎìú Î°úÍπÖ ...

            // 3. KispgWebhookService Ìò∏Ï∂ú
            String responseToKispg = kispgWebhookService.processPaymentNotification(notificationRequest, clientIp);

            logger.info("‚úÖ KISPG Webhook Ï≤òÎ¶¨ ÏôÑÎ£å - ÏùëÎãµ: {}", responseToKispg);
            return ResponseEntity.ok(responseToKispg);

        } catch (Exception e) {
            logger.error("‚ùå KISPG Webhook Ï≤òÎ¶¨ Ï§ë Ïã¨Í∞ÅÌïú Ïò§Î•ò Î∞úÏÉù:", e);
            return ResponseEntity.internalServerError().body("INTERNAL_SERVER_ERROR");
        }
    }

    private void logAllRequestParameters(HttpServletRequest request) {
        logger.info("üìã KISPG Webhook Ïã§Ï†ú ÏàòÏã† ÌååÎùºÎØ∏ÌÑ∞ (Raw):");
        request.getParameterMap().forEach((key, values) -> {
            logger.info("  - {} = {}", key, String.join(", ", values));
        });
    }
}